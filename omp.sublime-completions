
{
    "scope": "source.pawn - variable.other.pawn",
    "completions":
    [
        // Player
        {"trigger": "TogglePlayerWidescreen", "contents": "TogglePlayerWidescreen(${1:playerid}, ${2:bool:set})"},
        {"trigger": "IsPlayerWidescreenToggled", "contents": "IsPlayerWidescreenToggled(${1:playerid})"},
        {"trigger": "GetSpawnInfo", "contents": "GetSpawnInfo(${1:playerid}, ${2:&teamid}, ${3:&modelid = 0}, ${4:&Float:spawn_x = 0.0}, ${5:&Float:spawn_y = 0.0}, ${6:&Float:spawn_z = 0.0}, ${7:&Float:z_angle = 0.0}, ${8:&weapon1 = 0}, ${9:&weapon1_ammo = 0}, ${10:&weapon2 = 0}, ${11:&weapon2_ammo = 0}, ${12:&weapon3 = 0}, ${13:&weapon3_ammo = 0})"},
        {"trigger": "GetPlayerSkillLevel", "contents": "GetPlayerSkillLevel(${1:playerid}, ${2:skill})"},
        {"trigger": "IsPlayerCheckpointActive", "contents": "IsPlayerCheckpointActive(${1:playerid})"},
        {"trigger": "GetPlayerCheckpoint", "contents": "GetPlayerCheckpoint(${1:playerid}, ${2:&Float:fX}, ${3:&Float:fY = 0.0}, ${4:&Float:fZ = 0.0}, ${5:&Float:fSize = 0.0})"},
        {"trigger": "IsPlayerRaceCheckpointActive", "contents": "IsPlayerRaceCheckpointActive(${1:playerid})"},
        {"trigger": "GetPlayerRaceCheckpoint", "contents": "GetPlayerRaceCheckpoint(${1:playerid}, ${2:&Float:fX}, ${3:&Float:fY = 0.0}, ${4:&Float:fZ = 0.0}, ${5:&Float:fNextX = 0.0}, ${6:&Float:fNextY = 0.0}, ${7:&Float:fNextZ = 0.0}, ${8:&Float:fSize = 0.0})"},
        {"trigger": "GetPlayerWorldBounds", "contents": "GetPlayerWorldBounds(${1:playerid}, ${2:&Float:x_max}, ${3:&Float:x_min = 0.0}, ${4:&Float:y_max = 0.0}, ${5:&Float:y_min = 0.0})"},
        {"trigger": "IsPlayerInModShop", "contents": "IsPlayerInModShop(${1:playerid})"},
        {"trigger": "GetPlayerSirenState", "contents": "GetPlayerSirenState(${1:playerid})"},
        {"trigger": "GetPlayerLandingGearState", "contents": "GetPlayerLandingGearState(${1:playerid})"},
        {"trigger": "GetPlayerHydraReactorAngle", "contents": "GetPlayerHydraReactorAngle(${1:playerid})"},
        {"trigger": "GetPlayerTrainSpeed", "contents": "Float:GetPlayerTrainSpeed(${1:playerid})"},
        {"trigger": "GetPlayerZAim", "contents": "Float:GetPlayerZAim(${1:playerid})"},
        {"trigger": "GetPlayerSurfingOffsets", "contents": "GetPlayerSurfingOffsets(${1:playerid}, ${2:&Float:fOffsetX}, ${3:&Float:fOffsetY = 0.0}, ${4:&Float:fOffsetZ = 0.0})"},
        {"trigger": "GetPlayerRotationQuat", "contents": "GetPlayerRotationQuat(${1:playerid}, ${2:&Float:w}, ${3:&Float:x = 0.0}, ${4:&Float:y = 0.0}, ${5:&Float:z = 0.0})"},
        {"trigger": "GetPlayerDialogID", "contents": "GetPlayerDialogID(${1:playerid})"},
        {"trigger": "GetPlayerSpectateID", "contents": "GetPlayerSpectateID(${1:playerid})"},
        {"trigger": "GetPlayerSpectateType", "contents": "GetPlayerSpectateType(${1:playerid})"},
        {"trigger": "GetPlayerRawIp", "contents": "GetPlayerRawIp(${1:playerid})"},
        {"trigger": "SetPlayerGravity", "contents": "SetPlayerGravity(${1:playerid}, ${2:Float:gravity})"},
        {"trigger": "GetPlayerGravity", "contents": "Float:GetPlayerGravity(${1:playerid})"},
        {"trigger": "SetPlayerAdmin", "contents": "SetPlayerAdmin(${1:playerid}, ${2:bool:admin})"},
        {"trigger": "IsPlayerSpawned", "contents": "IsPlayerSpawned(${1:playerid})"},
        {"trigger": "IsPlayerControllable", "contents": "IsPlayerControllable(${1:playerid})"},
        {"trigger": "IsPlayerCameraTargetEnabled", "contents": "IsPlayerCameraTargetEnabled(${1:playerid})"},
        {"trigger": "TogglePlayerGhostMode", "contents": "TogglePlayerGhostMode(${1:playerid}, ${2:bool:toggle})"},
        {"trigger": "GetPlayerGhostMode", "contents": "GetPlayerGhostMode(${1:playerid})"},
        {"trigger": "GetPlayerBuildingsRemoved", "contents": "GetPlayerBuildingsRemoved(${1:playerid})"},
        {"trigger": "GetPlayerAttachedObject", "contents": "GetPlayerAttachedObject(${1:playerid}, ${2:index}, ${3:&modelid}, ${4:&bone = 0}, ${5:&Float:fX = 0.0}, ${6:&Float:fY = 0.0}, ${7:&Float:fZ = 0.0}, ${8:&Float:fRotX = 0.0}, ${9:&Float:fRotY = 0.0}, ${10:&Float:fRotZ = 0.0}, ${11:&Float:fSacleX = 0.0}, ${12:&Float:fScaleY = 0.0}, ${13:&Float:fScaleZ = 0.0}, ${14:&materialcolor1 = 0}, ${15:&materialcolor2 = 0})"},
        {"trigger": "SendClientMessagef", "contents": "SendClientMessagef(${1:playerid}, ${2:color}, ${3:const message[]}, ${4:...})"},
        {"trigger": "GameTextForPlayerf", "contents": "GameTextForPlayerf(${1:playerid}, ${2:displaytime}, ${3:style}, ${4:const message[]}, ${5:...})"},
        {"trigger": "SendPlayerMessageToPlayerf", "contents": "SendPlayerMessageToPlayerf(${1:playerid}, ${2:senderid}, ${3:const message[]}, ${4:...})"},
        {"trigger": "RemovePlayerWeapon", "contents": "RemovePlayerWeapon(${1:playerid}, ${2:weaponid})"},
        {"trigger": "HidePlayerDialog", "contents": "HidePlayerDialog(${1:playerid})"},
        
        // Textdraw - Global
        {"trigger": "IsValidTextDraw", "contents": "IsValidTextDraw(${1:Text:textdrawid})"},
        {"trigger": "IsTextDrawVisibleForPlayer", "contents": "IsTextDrawVisibleForPlayer(${1:playerid}, ${2:Text:textdrawid})"},
        {"trigger": "TextDrawGetString", "contents": "TextDrawGetString(${1:Text:textdrawid}, ${2:text[]}, ${3:len = sizeof(text)})"},
        {"trigger": "TextDrawSetPos", "contents": "TextDrawSetPos(${1:Text:textdrawid}, ${2:Float:fX}, ${3:Float:fY})"},
        {"trigger": "TextDrawGetLetterSize", "contents": "TextDrawGetLetterSize(${1:Text:textdrawid}, ${2:&Float:fX}, ${3:&Float:fY = 0.0})"},
        {"trigger": "TextDrawGetTextSize", "contents": "TextDrawGetTextSize(${1:Text:textdrawid}, ${2:&Float:fX}, ${3:&Float:fY = 0.0})"},
        {"trigger": "TextDrawGetPos", "contents": "TextDrawGetPos(${1:Text:textdrawid}, ${2:&Float:fX}, ${3:&Float:fY = 0.0})"},
        {"trigger": "TextDrawGetColor", "contents": "TextDrawGetColor(${1:Text:textdrawid})"},
        {"trigger": "TextDrawGetBoxColor", "contents": "TextDrawGetBoxColor(${1:Text:textdrawid})"},
        {"trigger": "TextDrawGetBackgroundColor", "contents": "TextDrawGetBackgroundColor(${1:Text:textdrawid})"},
        {"trigger": "TextDrawGetShadow", "contents": "TextDrawGetShadow(${1:Text:textdrawid})"},
        {"trigger": "TextDrawGetOutline", "contents": "TextDrawGetOutline(${1:Text:textdrawid})"},
        {"trigger": "TextDrawGetFont", "contents": "TextDrawGetFont(${1:Text:textdrawid})"},
        {"trigger": "TextDrawIsBox", "contents": "TextDrawIsBox(${1:Text:textdrawid})"},
        {"trigger": "TextDrawIsProportional", "contents": "TextDrawIsProportional(${1:Text:textdrawid})"},
        {"trigger": "TextDrawIsSelectable", "contents": "TextDrawIsSelectable(${1:Text:textdrawid})"},
        {"trigger": "TextDrawGetAlignment", "contents": "TextDrawGetAlignment(${1:Text:textdrawid})"},
        {"trigger": "TextDrawGetPreviewModel", "contents": "TextDrawGetPreviewModel(${1:Text:textdrawid})"},
        {"trigger": "TextDrawGetPreviewRot", "contents": "TextDrawGetPreviewRot(${1:Text:textdrawid}, ${2:&Float:fRotX}, ${3:&Float:fRotY = 0.0}, ${4:&Float:fRotZ = 0.0}, ${5:&Float:fZoom = 0.0})"},
        {"trigger": "TextDrawGetPreviewVehCol", "contents": "TextDrawGetPreviewVehCol(${1:Text:textdrawid}, ${2:&color1}, ${3:&color2 = 0})"},
        {"trigger": "TextDrawSetStringForPlayer", "contents": "TextDrawSetStringForPlayer(${1:Text:textdrawid}, ${2:playerid}, ${3:const fmat[]}, ${4:...})"},
        
        // Textdraw - Player
        {"trigger": "IsValidPlayerTextDraw", "contents": "IsValidPlayerTextDraw(${1:playerid}, ${2:PlayerText:textdrawid})"},
        {"trigger": "IsPlayerTextDrawVisible", "contents": "IsPlayerTextDrawVisible(${1:playerid}, ${2:PlayerText:textdrawid})"},
        {"trigger": "PlayerTextDrawGetString", "contents": "PlayerTextDrawGetString(${1:playerid}, ${2:PlayerText:textdrawid}, ${3:text[]}, ${4:len = sizeof(text)})"},
        {"trigger": "PlayerTextDrawSetPos", "contents": "PlayerTextDrawSetPos(${1:playerid}, ${2:PlayerText:textdrawid}, ${3:Float:fX}, ${4:Float:fY})"},
        {"trigger": "PlayerTextDrawGetLetterSize", "contents": "PlayerTextDrawGetLetterSize(${1:playerid}, ${2:PlayerText:textdrawid}, ${3:&Float:fX}, ${4:&Float:fY = 0.0})"},
        {"trigger": "PlayerTextDrawGetTextSize", "contents": "PlayerTextDrawGetTextSize(${1:playerid}, ${2:PlayerText:textdrawid}, ${3:&Float:fX}, ${4:&Float:fY = 0.0})"},
        {"trigger": "PlayerTextDrawGetPos", "contents": "PlayerTextDrawGetPos(${1:playerid}, ${2:PlayerText:textdrawid}, ${3:&Float:fX}, ${4:&Float:fY = 0.0})"},
        {"trigger": "PlayerTextDrawGetColor", "contents": "PlayerTextDrawGetColor(${1:playerid}, ${2:PlayerText:textdrawid})"},
        {"trigger": "PlayerTextDrawGetBoxColor", "contents": "PlayerTextDrawGetBoxColor(${1:playerid}, ${2:PlayerText:textdrawid})"},
        {"trigger": "PlayerTextDrawGetBackgroundCol", "contents": "PlayerTextDrawGetBackgroundCol(${1:playerid}, ${2:PlayerText:textdrawid})"},
        {"trigger": "PlayerTextDrawGetShadow", "contents": "PlayerTextDrawGetShadow(${1:playerid}, ${2:PlayerText:textdrawid})"},
        {"trigger": "PlayerTextDrawGetOutline", "contents": "PlayerTextDrawGetOutline(${1:playerid}, ${2:PlayerText:textdrawid})"},
        {"trigger": "PlayerTextDrawGetFont", "contents": "PlayerTextDrawGetFont(${1:playerid}, ${2:PlayerText:textdrawid})"},
        {"trigger": "PlayerTextDrawIsBox", "contents": "PlayerTextDrawIsBox(${1:playerid}, ${2:PlayerText:textdrawid})"},
        {"trigger": "PlayerTextDrawIsProportional", "contents": "PlayerTextDrawIsProportional(${1:playerid}, ${2:PlayerText:textdrawid})"},
        {"trigger": "PlayerTextDrawIsSelectable", "contents": "PlayerTextDrawIsSelectable(${1:playerid}, ${2:PlayerText:textdrawid})"},
        {"trigger": "PlayerTextDrawGetAlignment", "contents": "PlayerTextDrawGetAlignment(${1:playerid}, ${2:PlayerText:textdrawid})"},
        {"trigger": "PlayerTextDrawGetPreviewModel", "contents": "PlayerTextDrawGetPreviewModel(${1:playerid}, ${2:PlayerText:textdrawid})"},
        {"trigger": "PlayerTextDrawGetPreviewRot", "contents": "PlayerTextDrawGetPreviewRot(${1:playerid}, ${2:PlayerText:textdrawid}, ${3:&Float:fRotX}, ${4:&Float:fRotY = 0.0}, ${5:&Float:fRotZ = 0.0}, ${6:&Float:fZoom = 0.0})"},
        {"trigger": "PlayerTextDrawGetPreviewVehCol", "contents": "PlayerTextDrawGetPreviewVehCol(${1:playerid}, ${2:PlayerText:textdrawid}, ${3:&color1}, ${4:&color2 = 0})"},
        
        // Gangzone - Global
        {"trigger": "IsValidGangZone", "contents": "IsValidGangZone(${1:zoneid})"},
        {"trigger": "IsPlayerInGangZone", "contents": "IsPlayerInGangZone(${1:playerid}, ${2:zoneid})"},
        {"trigger": "IsGangZoneVisibleForPlayer", "contents": "IsGangZoneVisibleForPlayer(${1:playerid}, ${2:zoneid})"},
        {"trigger": "GangZoneGetColorForPlayer", "contents": "GangZoneGetColorForPlayer(${1:playerid}, ${2:zoneid})"},
        {"trigger": "GangZoneGetFlashColorForPlayer", "contents": "GangZoneGetFlashColorForPlayer(${1:playerid}, ${2:zoneid})"},
        {"trigger": "IsGangZoneFlashingForPlayer", "contents": "IsGangZoneFlashingForPlayer(${1:playerid}, ${2:zoneid})"},
        {"trigger": "GangZoneGetPos", "contents": "GangZoneGetPos(${1:zoneid}, ${2:&Float:fMinX}, ${3:&Float:fMinY = 0.0}, ${4:&Float:fMaxX = 0.0}, ${5:&Float:fMaxY = 0.0})"},
        {"trigger": "UseGangZoneCheck", "contents": "UseGangZoneCheck(${1:zoneid}, ${2:bool:toggle})"},
        {"trigger": "OnPlayerEnterGangZone", "contents": "OnPlayerEnterGangZone(${1:playerid}, ${2:zoneid})"},
        {"trigger": "OnPlayerLeaveGangZone", "contents": "OnPlayerLeaveGangZone(${1:playerid}, ${2:zoneid})"},
        {"trigger": "OnPlayerClickGangZone", "contents": "OnPlayerClickGangZone(${1:playerid}, ${2:zoneid})"},
        {"trigger": "CreatePlayerGangZone", "contents": "CreatePlayerGangZone(${1:playerid}, ${2:Float:minx}, ${3:Float:miny}, ${4:Float:maxx}, ${5:Float:maxy})"},
        {"trigger": "PlayerGangZoneDestroy", "contents": "PlayerGangZoneDestroy(${1:playerid}, ${2:zoneid})"},
        {"trigger": "PlayerGangZoneShow", "contents": "PlayerGangZoneShow(${1:playerid}, ${2:zoneid}, ${3:color})"},
        {"trigger": "PlayerGangZoneHide", "contents": "PlayerGangZoneHide(${1:playerid}, ${2:zoneid})"},
        {"trigger": "PlayerGangZoneFlash", "contents": "PlayerGangZoneFlash(${1:playerid}, ${2:zoneid}, ${3:color})"},
        {"trigger": "PlayerGangZoneStopFlash", "contents": "PlayerGangZoneStopFlash(${1:playerid}, ${2:zoneid})"},
        {"trigger": "IsValidPlayerGangZone", "contents": "IsValidPlayerGangZone(${1:playerid}, ${2:zoneid})"},
        {"trigger": "IsPlayerInPlayerGangZone", "contents": "IsPlayerInPlayerGangZone(${1:playerid}, ${2:zoneid})"},
        {"trigger": "IsPlayerGangZoneVisible", "contents": "IsPlayerGangZoneVisible(${1:playerid}, ${2:zoneid})"},
        {"trigger": "PlayerGangZoneGetColor", "contents": "PlayerGangZoneGetColor(${1:playerid}, ${2:zoneid})"},
        {"trigger": "PlayerGangZoneGetFlashColor", "contents": "PlayerGangZoneGetFlashColor(${1:playerid}, ${2:zoneid})"},
        {"trigger": "IsPlayerGangZoneFlashing", "contents": "IsPlayerGangZoneFlashing(${1:playerid}, ${2:zoneid})"},
        {"trigger": "PlayerGangZoneGetPos", "contents": "PlayerGangZoneGetPos(${1:playerid}, ${2:zoneid}, ${3:&Float:fMinX}, ${4:&Float:fMinY}, ${5:&Float:fMaxX}, ${6:&Float:fMaxY})"},
        {"trigger": "UsePlayerGangZoneCheck", "contents": "UsePlayerGangZoneCheck(${1:playerid}, ${2:zoneid}, ${3:bool:use})"},
        
        // Gangzone callbacks - Player
        {"trigger": "OnPlayerEnterPlayerGangZone", "contents": "OnPlayerEnterPlayerGangZone(${1:playerid}, ${2:zoneid})"},
        {"trigger": "OnPlayerLeavePlayerGangZone", "contents": "OnPlayerLeavePlayerGangZone(${1:playerid}, ${2:zoneid})"},
        {"trigger": "OnPlayerClickPlayerGangZone", "contents": "OnPlayerClickPlayerGangZone(${1:playerid}, ${2:zoneid})"},
       
        // Object - Global
        {"trigger": "GetObjectDrawDistance", "contents": "Float:GetObjectDrawDistance(${1:objectid})"},
        {"trigger": "GetObjectMoveSpeed", "contents": "Float:GetObjectMoveSpeed(${1:objectid})"},
        {"trigger": "GetObjectTarget", "contents": "GetObjectTarget(${1:objectid}, ${2:&Float:fX}, ${3:&Float:fY = 0.0}, ${4:&Float:fZ = 0.0})"},
        {"trigger": "GetObjectMovingTargetPos", "contents": "GetObjectMovingTargetPos(${1:objectid}, ${2:&Float:fX}, ${3:&Float:fY = 0.0}, ${4:&Float:fZ = 0.0})"},
        {"trigger": "GetObjectMovingTargetRot", "contents": "GetObjectMovingTargetRot(${1:objectid}, ${2:&Float:fX}, ${3:&Float:fY = 0.0}, ${4:&Float:fZ = 0.0})"},
        {"trigger": "GetObjectAttachedData", "contents": "GetObjectAttachedData(${1:objectid}, ${2:&attached_vehicleid}, ${3:&attached_objectid = 0}, ${4:&attached_playerid = 0})"},
        {"trigger": "GetObjectAttachedOffset", "contents": "GetObjectAttachedOffset(${1:objectid}, ${2:&Float:fX}, ${3:&Float:fY = 0.0}, ${4:&Float:fZ = 0.0}, ${5:&Float:fRotX = 0.0}, ${6:&Float:fRotY = 0.0}, ${7:&Float:fRotZ = 0.0})"},
        {"trigger": "GetObjectSyncRotation", "contents": "GetObjectSyncRotation(${1:objectid})"},
        {"trigger": "IsObjectMaterialSlotUsed", "contents": "IsObjectMaterialSlotUsed(${1:objectid}, ${2:materialindex})"},
        {"trigger": "GetObjectMaterial", "contents": "GetObjectMaterial(${1:objectid}, ${2:materialindex}, ${3:&modelid}, ${4:txdname[]}, ${5:txdnamelen = sizeof(txdname)}, ${6:texturename[]}, ${7:texturenamelen = sizeof(texturename)}, ${8:&materialcolor = 0})"},
        {"trigger": "GetObjectMaterialText", "contents": "GetObjectMaterialText(${1:objectid}, ${2:materialindex}, ${3:text[]}, ${4:textlen = sizeof(text)}, ${5:&materialsize}, ${6:fontface[]}, ${7:fontfacelen = sizeof(fontface)}, ${8:&fontsize = 0}, ${9:&bold = 0}, ${10:&fontcolor = 0}, ${11:&backcolor = 0}, ${12:&textalignment = 0})"},
        {"trigger": "IsObjectNoCameraCol", "contents": "IsObjectNoCameraCol(${1:objectid})"},
        
        // Object - Player
        {"trigger": "GetPlayerObjectDrawDistance", "contents": "Float:GetPlayerObjectDrawDistance(${1:playerid}, ${2:objectid})"},
        {"trigger": "SetPlayerObjectMoveSpeed", "contents": "SetPlayerObjectMoveSpeed(${1:playerid}, ${2:objectid}, ${3:Float:fSpeed})"},
        {"trigger": "GetPlayerObjectMoveSpeed", "contents": "Float:GetPlayerObjectMoveSpeed(${1:playerid}, ${2:objectid})"},
        {"trigger": "GetPlayerObjectTarget", "contents": "GetPlayerObjectTarget(${1:playerid}, ${2:objectid}, ${3:&Float:fX}, ${4:&Float:fY = 0.0}, ${5:&Float:fZ = 0.0})"},
        {"trigger": "GetPlayerObjectMovingTargetPos", "contents": "GetPlayerObjectMovingTargetPos(${1:playerid}, ${2:objectid}, ${3:&Float:fX}, ${4:&Float:fY = 0.0}, ${5:&Float:fZ = 0.0})"},
        {"trigger": "GetPlayerObjectMovingTargetRot", "contents": "GetPlayerObjectMovingTargetRot(${1:playerid}, ${2:objectid}, ${3:&Float:fX}, ${4:&Float:fY = 0.0}, ${5:&Float:fZ = 0.0})"},
        {"trigger": "GetPlayerObjectAttachedData", "contents": "GetPlayerObjectAttachedData(${1:playerid}, ${2:objectid}, ${3:&attached_vehicleid}, ${4:&attached_objectid = 0}, ${5:&attached_playerid = 0})"},
        {"trigger": "GetPlayerObjectAttachedOffset", "contents": "GetPlayerObjectAttachedOffset(${1:playerid}, ${2:objectid}, ${3:&Float:fX}, ${4:&Float:fY = 0.0}, ${5:&Float:fZ = 0.0}, ${6:&Float:fRotX = 0.0}, ${7:&Float:fRotY = 0.0}, ${8:&Float:fRotZ = 0.0})"},
        {"trigger": "GetPlayerObjectSyncRotation", "contents": "GetPlayerObjectSyncRotation(${1:playerid}, ${2:objectid})"},
        {"trigger": "IsPlayerObjectMaterialSlotUsed", "contents": "IsPlayerObjectMaterialSlotUsed(${1:playerid}, ${2:objectid}, ${3:materialindex})"},
        {"trigger": "GetPlayerObjectMaterial", "contents": "GetPlayerObjectMaterial(${1:playerid}, ${2:objectid}, ${3:materialindex}, ${4:&modelid}, ${5:txdname[]}, ${6:txdnamelen = sizeof(txdname)}, ${7:texturename[]}, ${8:texturenamelen = sizeof(texturename)}, ${9:&materialcolor = 0})"},
        {"trigger": "GetPlayerObjectMaterialText", "contents": "GetPlayerObjectMaterialText(${1:playerid}, ${2:objectid}, ${3:materialindex}, ${4:text[]}, ${5:textlen = sizeof(text)}, ${6:&materialsize}, ${7:fontface[]}, ${8:fontfacelen = sizeof(fontface)}, ${9:&fontsize = 0}, ${10:&bold = 0}, ${11:&fontcolor = 0}, ${12:&backcolor = 0}, ${13:&textalignment = 0})"},
        {"trigger": "IsPlayerObjectNoCameraCol", "contents": "IsPlayerObjectNoCameraCol(${1:playerid}, ${2:objectid})"},
        {"trigger": "GetPlayerSurfingPlayerObjectID", "contents": "GetPlayerSurfingPlayerObjectID(${1:playerid})"},
        {"trigger": "GetPlayerCameraTargetPlayerObj", "contents": "GetPlayerCameraTargetPlayerObj(${1:playerid})"},
        {"trigger": "GetObjectType", "contents": "GetObjectType(${1:playerid}, ${2:objectid})"},
        
        // Pickup - Global
        {"trigger": "IsValidPickup", "contents": "IsValidPickup(${1:pickupid})"},
        {"trigger": "IsPickupStreamedIn", "contents": "IsPickupStreamedIn(${1:playerid}, ${2:pickupid})"},
        {"trigger": "GetPickupPos", "contents": "GetPickupPos(pickupid}, ${2:&Float:fX}, ${3:&Float:fY = 0.0}, ${4:&Float:fZ = 0.0})"},
        {"trigger": "GetPickupModel", "contents": "GetPickupModel(${1:pickupid})"},
        {"trigger": "GetPickupType", "contents": "GetPickupType(${1:pickupid})"},
        {"trigger": "GetPickupVirtualWorld", "contents": "GetPickupVirtualWorld(${1:pickupid})"},
        {"trigger": "SetPickupPos", "contents": "SetPickupPos(pickupid}, ${2:Float:X}, ${3:Float:Y}, ${4:Float:Z}, ${5:bool:update=true})"},
        {"trigger": "SetPickupModel", "contents": "SetPickupModel(${1:pickupid}, ${2:model}, ${3:bool:update=true})"},
        {"trigger": "SetPickupType", "contents": "SetPickupType(${1:pickupid}, ${2:type}, ${3:bool:update=true})"},
        {"trigger": "SetPickupVirtualWorld", "contents": "SetPickupVirtualWorld(${1:pickupid}, ${2:virtualworld})"},
        {"trigger": "ShowPickupForPlayer", "contents": "ShowPickupForPlayer(${1:playerid}, ${2:pickupid})"},
        {"trigger": "HidePickupForPlayer", "contents": "HidePickupForPlayer(${1:playerid}, ${2:pickupid})"},
        {"trigger": "IsPickupHiddenForPlayer", "contents": "IsPickupHiddenForPlayer(${1:playerid}, ${2:pickupid})"},
        
        // Menu
        {"trigger": "IsMenuDisabled", "contents": "IsMenuDisabled(${1:Menu:menuid})"},
        {"trigger": "IsMenuRowDisabled", "contents": "IsMenuRowDisabled(${1:Menu:menuid}, ${2:row})"},
        {"trigger": "GetMenuColumns", "contents": "GetMenuColumns(${1:Menu:menuid})"},
        {"trigger": "GetMenuItems", "contents": "GetMenuItems(${1:Menu:menuid}, ${2:column})"},
        {"trigger": "GetMenuPos", "contents": "GetMenuPos(${1:Menu:menuid}, ${2:&Float:fX}, ${3:&Float:fY = 0.0})"},
        {"trigger": "GetMenuColumnWidth", "contents": "GetMenuColumnWidth(${1:Menu:menuid}, ${2:&Float:fColumn1}, ${3:&Float:fColumn2 = 0.0})"},
        {"trigger": "GetMenuColumnHeader", "contents": "GetMenuColumnHeader(${1:Menu:menuid}, ${2:column}, ${3:header[]}, ${4:len = sizeof(header)})"},
        {"trigger": "GetMenuItem", "contents": "GetMenuItem(${1:Menu:menuid}, ${2:column}, ${3:itemid}, ${4:item[]}, ${5:len = sizeof(item)})"},
        
        // 3D Text - Global
        {"trigger": "IsValid3DTextLabel", "contents": "bool:IsValid3DTextLabel(${1:Text3D:id})"},
        {"trigger": "Is3DTextLabelStreamedIn", "contents": "Is3DTextLabelStreamedIn(${1:playerid}, ${2:Text3D:id})"},
        {"trigger": "Get3DTextLabelText", "contents": "Get3DTextLabelText(${1:Text3D:id}, ${2:text[]}, ${3:len = sizeof(text)})"},
        {"trigger": "Get3DTextLabelColor", "contents": "Get3DTextLabelColor(${1:Text3D:id})"},
        {"trigger": "Get3DTextLabelPos", "contents": "Get3DTextLabelPos(${1:Text3D:id}, ${2:&Float:fX}, ${3:&Float:fY = 0.0}, ${4:&Float:fZ = 0.0})"},
        {"trigger": "Set3DTextLabelDrawDistance", "contents": "Set3DTextLabelDrawDistance(${1:Text3D:id}, ${2:Float:dist})"},
        {"trigger": "Get3DTextLabelDrawDistance", "contents": "Float:Get3DTextLabelDrawDistance(${1:Text3D:id})"},
        {"trigger": "Get3DTextLabelLOS", "contents": "bool:Get3DTextLabelLOS(${1:Text3D:id})"},
        {"trigger": "Set3DTextLabelLOS", "contents": "Set3DTextLabelLOS(${1:Text3D:id}, ${2:bool:status})"},
        {"trigger": "Set3DTextLabelVirtualWorld", "contents": "Set3DTextLabelVirtualWorld(${1:Text3D:id}, ${2:worldid})"},
        {"trigger": "Get3DTextLabelVirtualWorld", "contents": "Get3DTextLabelVirtualWorld(${1:Text3D:id})"},
        {"trigger": "Get3DTextLabelAttachedData", "contents": "Get3DTextLabelAttachedData(${1:Text3D:id}, ${2:&attached_playerid}, ${3:&attached_vehicleid = 0})"},
        
        // 3D Text - Player
        {"trigger": "IsValidPlayer3DTextLabel", "contents": "bool:IsValidPlayer3DTextLabel(${1:playerid}, ${2:PlayerText3D:id})"},
        {"trigger": "GetPlayer3DTextLabelText", "contents": "GetPlayer3DTextLabelText(${1:playerid}, ${2:PlayerText3D:id}, ${3:text[]}, ${4:len = sizeof(text)})"},
        {"trigger": "GetPlayer3DTextLabelColor", "contents": "GetPlayer3DTextLabelColor(${1:playerid}, ${2:PlayerText3D:id})"},
        {"trigger": "GetPlayer3DTextLabelPos", "contents": "GetPlayer3DTextLabelPos(${1:playerid}, ${2:PlayerText3D:id}, ${3:&Float:fX}, ${4:&Float:fY = 0.0}, ${5:&Float:fZ = 0.0})"},
        {"trigger": "SetPlayer3DTextLabelDrawDist", "contents": "SetPlayer3DTextLabelDrawDist(${1:playerid}, ${2:PlayerText3D:id}, ${3:Float:dist})"},
        {"trigger": "GetPlayer3DTextLabelDrawDist", "contents": "Float:GetPlayer3DTextLabelDrawDist(${1:playerid}, ${2:PlayerText3D:id})"},
        {"trigger": "GetPlayer3DTextLabelLOS", "contents": "bool:GetPlayer3DTextLabelLOS(${1:playerid}, ${2:PlayerText3D:id})"},
        {"trigger": "SetPlayer3DTextLabelLOS", "contents": "SetPlayer3DTextLabelLOS(${1:playerid}, ${2:PlayerText3D:id}, ${3:bool:status})"},
        {"trigger": "GetPlayer3DTextLabelVirtualW", "contents": "GetPlayer3DTextLabelVirtualW(${1:playerid}, ${2:PlayerText3D:id})"},
        {"trigger": "GetPlayer3DTextLabelAttached", "contents": "GetPlayer3DTextLabelAttached(${1:playerid}, ${2:PlayerText3D:id}, ${3:&attached_playerid}, ${4:&attached_vehicleid = 0})"},
        
        // Vehicle
        {"trigger": "GetVehicleSpawnInfo", "contents": "GetVehicleSpawnInfo(${1:vehicleid}, ${2:&Float:fX}, ${3:&Float:fY = 0.0}, ${4:&Float:fZ = 0.0}, ${5:&Float:fRot = 0.0}, ${6:&color1 = 0}, ${7:&color2 = 0})"},
        {"trigger": "SetVehicleSpawnInfo", "contents": "SetVehicleSpawnInfo(${1:vehicleid}, ${2:modelid}, ${3:Float:fX}, ${4:Float:fY}, ${5:Float:fZ}, ${6:Float:fAngle}, ${7:color1}, ${8:color2}, ${9:respawntime = -2}, ${10:interior = -2})"},
        {"trigger": "GetVehicleColor", "contents": "GetVehicleColor(${1:vehicleid}, ${2:&color1}, ${3:&color2 = 0})"},
        {"trigger": "GetVehiclePaintjob", "contents": "GetVehiclePaintjob(${1:vehicleid})"},
        {"trigger": "GetVehicleInterior", "contents": "GetVehicleInterior(${1:vehicleid})"},
        {"trigger": "GetVehicleNumberPlate", "contents": "GetVehicleNumberPlate(${1:vehicleid}, ${2:plate[]}, ${3:len = sizeof(plate)})"},
        {"trigger": "SetVehicleRespawnDelay", "contents": "SetVehicleRespawnDelay(${1:vehicleid}, ${2:delay})"},
        {"trigger": "GetVehicleRespawnDelay", "contents": "GetVehicleRespawnDelay(${1:vehicleid})"},
        {"trigger": "GetVehicleTower", "contents": "GetVehicleTower(${1:vehicleid})"},
        {"trigger": "GetVehicleCab", "contents": "GetVehicleCab(${1:vehicleid})"},
        {"trigger": "GetVehicleOccupiedTick", "contents": "GetVehicleOccupiedTick(${1:vehicleid})"},
        {"trigger": "HasVehicleBeenOccupied", "contents": "HasVehicleBeenOccupied(${1:vehicleid})"},
        {"trigger": "IsVehicleOccupied", "contents": "IsVehicleOccupied(${1:vehicleid})"},
        {"trigger": "GetVehicleRespawnTick", "contents": "GetVehicleRespawnTick(${1:vehicleid})"},
        {"trigger": "IsVehicleDead", "contents": "IsVehicleDead(${1:vehicleid})"},
        {"trigger": "ToggleVehicleSirenEnabled", "contents": "ToggleVehicleSirenEnabled(${1:vehicleid}, ${2:enabled})"},
        {"trigger": "IsVehicleSirenEnabled", "contents": "IsVehicleSirenEnabled(${1:vehicleid})"},
        {"trigger": "GetVehicleModelCount", "contents": "GetVehicleModelCount(${1:modelid})"},
        {"trigger": "GetVehicleModelsUsed", "contents": "GetVehicleModelsUsed()"},
        {"trigger": "GetVehicleSirenState", "contents": "GetVehicleSirenState(${1:vehicleid})"},
        {"trigger": "GetVehicleLandingGearState", "contents": "GetVehicleLandingGearState(${1:vehicleid})"},
        {"trigger": "GetVehicleHydraReactorAngle", "contents": "GetVehicleHydraReactorAngle(${1:vehicleid})"},
        {"trigger": "GetVehicleTrainSpeed", "contents": "Float:GetVehicleTrainSpeed(${1:vehicleid})"},
        {"trigger": "GetVehicleMatrix", "contents": "GetVehicleMatrix(${1:vehicleid}, ${2:&Float:rightX}, ${3:&Float:rightY = 0.0}, ${4:&Float:rightZ = 0.0}, ${5:&Float:upX = 0.0}, ${6:&Float:upY = 0.0}, ${7:&Float:upZ = 0.0}, ${8:&Float:atX = 0.0}, ${9:&Float:atY = 0.0}, ${10:&Float:atZ = 0.0})"},
        
        // Actor
        {"trigger": "GetActorSkin", "contents": "GetActorSkin(${1:actorid})"},
        {"trigger": "SetActorSkin", "contents": "SetActorSkin(${1:actorid}, ${2:model})"},
        {"trigger": "GetActorSpawnInfo", "contents": "GetActorSpawnInfo(${1:actorid}, ${2:&skinid}, ${3:&Float:fX = 0.0}, ${4:&Float:fY = 0.0}, ${5:&Float:fZ = 0.0}, ${6:&Float:fAngle = 0.0})"},
        {"trigger": "GetActorAnimation", "contents": "GetActorAnimation(${1:actorid}, ${2:animlib[]}, ${3:animlibsize = sizeof(animlib)}, ${4:animname[]}, ${5:animnamesize = sizeof(animname)}, ${6:&Float:fDelta}, ${7:&loop = 0}, ${8:&lockx = 0}, ${9:&locky = 0}, ${10:&freeze = 0}, ${11:&time = 0})"},
        
        // Chat character replacement
        {"trigger": "ToggleChatTextReplacement", "contents": "ToggleChatTextReplacement(${1:bool:toggle})"},
        {"trigger": "ChatTextReplacementToggled", "contents": "bool:ChatTextReplacementToggled()"},
        
        // Classes
        {"trigger": "GetAvailableClasses", "contents": "GetAvailableClasses()"},
        {"trigger": "GetPlayerClass", "contents": "GetPlayerClass(${1:classid}, ${2:&teamid}, ${3:&modelid = 0}, ${4:&Float:spawn_x = 0.0}, ${5:&Float:spawn_y = 0.0}, ${6:&Float:spawn_z = 0.0}, ${7:&Float:z_angle = 0.0}, ${8:&weapon1 = 0}, ${9:&weapon1_ammo = 0}, ${10:&weapon2 = 0}, ${11:&weapon2_ammo = 0}, ${12:&weapon3 = 0}, ${13:&weapon3_ammo = 0})"},
        {"trigger": "EditPlayerClass", "contents": "EditPlayerClass(${1:classid}, ${2:teamid}, ${3:modelid}, ${4:Float:spawn_x}, ${5:Float:spawn_y}, ${6:Float:spawn_z}, ${7:Float:z_angle}, ${8:weapon1}, ${9:weapon1_ammo}, ${10:weapon2}, ${11:weapon2_ammo}, ${12:weapon3}, ${13:weapon3_ammo})"},
        
        // Weapons
        {"trigger": "GetWeaponSlot", "contents": "GetWeaponSlot(${1:weaponid})"},
        
        // Core
        {"trigger": "ClearBanList", "contents": "ClearBanList()"},
        {"trigger": "IsBanned", "contents": "IsBanned(${1:const ipaddress[]})"},
        {"trigger": "IsValidNickName", "contents": "bool:IsValidNickName(${1:const name[]})"},
        {"trigger": "AllowNickNameCharacter", "contents": "AllowNickNameCharacter(${1:character}, ${2:bool:allow})"},
        {"trigger": "IsNickNameCharacterAllowed", "contents": "bool:IsNickNameCharacterAllowed(${1:character})"},
        {"trigger": "AddServerRule", "contents": "bool:AddServerRule(${1:const name[]}, ${2:const value[]})"},
        {"trigger": "SetServerRule", "contents": "bool:SetServerRule(${1:const name[]}, ${2:const value[]})"},
        {"trigger": "IsValidServerRule", "contents": "bool:IsValidServerRule(${1:const name[]})"},
        {"trigger": "RemoveServerRule", "contents": "bool:RemoveServerRule(${1:const name[]})"},
        {"trigger": "SendClientMessageToAllf", "contents": "SendClientMessageToAllf(${1:color}, ${2:const message[]}, ${3:...})"},
        {"trigger": "GameTextForAllf", "contents": "GameTextForAllf(${1:displaytime}, ${2:style}, ${3:const message[]}, ${4:...})"},
        {"trigger": "SendPlayerMessageToAllf", "contents": "SendPlayerMessageToAllf(${1:senderid}, ${2:const message[]}, ${3:...})"},
        {"trigger": "SendRconCommandf", "contents": "SendRconCommandf(${1:const command[]}, ${2:...})"},
        {"trigger": "GetRunningTimers", "contents": "GetRunningTimers()"}
    ]
}
